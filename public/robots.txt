# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
// import React, { useState } from 'react';

// async function runLangflow(inputValue) {
//   const url = "/api/lf/85d1d502-59c7-48c7-ada0-6cfb71fa7839/api/v1/run/dad37511-223e-4485-b33b-2d55e8e9083b?stream=false";
//   const headers = {
//     "Content-Type": "application/json",
//     "Authorization": `Bearer AstraCS:QWsAPbjEHowvUYgZCMhmUsTq:33978159c2188aa043938d264e3740a2da85c484f1bb6c0678a3b4401431cd68`
//   };
//   const body = {
//     input_value: inputValue,
//     output_type: "chat",
//     input_type: "chat",
//     tweaks: {
//       "ChatInput-Pbs56": {},
//       "ParseData-Tc67o": {},
//       "Prompt-fpcAu": {},
//       "SplitText-YeCPB": {},
//       "ChatOutput-frJqY": {},
//       "AstraDB-wxdvr": {},
//       "AstraDB-XT11N": {},
//       "File-icSdP": {},
//       "MistalAIEmbeddings-OSlJY": {},
//       "MistalAIEmbeddings-WWgxD": {},
//       "GroqModel-rqeeT": {}
//     }
//   };

//   try {
//     console.log('Sending request to:', url);
//     console.log('Request headers:', headers);
//     console.log('Request body:', body);

//     const response = await fetch(url, {
//       method: 'POST',
//       headers: headers,
//       body: JSON.stringify(body)
//     });

//     if (!response.ok) {
//       const errorDetails = await response.text();
//       throw new Error(`HTTP error! status: ${response.status}, details: ${errorDetails}`);
//     }

//     const responseData = await response.json();
//     console.log('Response:', responseData);
//     return responseData;
//   } catch (error) {
//     console.error('Error:', error.message);
//     throw error;
//   }
// }

// const Chat = () => {
//   const [messages, setMessages] = useState([]);
//   const [input, setInput] = useState('');

//   const handleSend = async () => {
//     if (input.trim()) {
//       setMessages([...messages, { text: input, sender: 'user' }]);
//       setInput('');

//       try {
//         const response = await runLangflow(input);
//         const botMessage = response.outputs[0].outputs.message.text; // Adjust this based on the actual response structure
//         setMessages((prevMessages) => [
//           ...prevMessages,
//           { text: botMessage, sender: 'bot' },
//         ]);
//       } catch (error) {
//         console.error('Error getting response from Langflow:', error);
//       }
//     }
//   };

//   return (
//     <div className="flex flex-col h-screen bg-gray-900 text-white">
//       <header className="bg-blue-600 text-white p-4 text-center">
//         <h1 className="text-xl font-bold">Langflow Chatbot</h1>
//       </header>
//       <div className="flex-1 overflow-y-auto p-4 relative">
//         {messages.map((msg, index) => (
//           <div key={index} className={`mb-2 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>
//             <span className={`inline-block p-2 rounded-lg ${msg.sender === 'user' ? 'bg-blue-500 text-white' : 'bg-black text-white'}`}>
//               {msg.text}
//             </span>
//           </div>
//         ))}
//         <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
//           <p className="text-gray-400">Team DCODE Ai</p>
//         </div>
//       </div>
//       <div className="p-4 bg-gray-800 border-t border-gray-700 flex items-center">
//         <input
//           type="text"
//           className="flex-grow p-2 border rounded-lg text-black focus:outline-none"
//           placeholder="Type your message..."
//           value={input}
//           onChange={(e) => setInput(e.target.value)}
//           onKeyPress={(e) => e.key === 'Enter' && handleSend()}
//         />
//         <button
//           onClick={handleSend}
//           className="ml-2 bg-blue-500 text-white p-2 rounded-lg"
//         >
//           Send
//         </button>
//       </div>
//     </div>
//   );
// };

// export default Chat;

import React, { useState } from 'react';

// Define the runLangflow function
async function runLangflow(inputValue) {
  const url = "/api/lf/85d1d502-59c7-48c7-ada0-6cfb71fa7839/api/v1/run/dad37511-223e-4485-b33b-2d55e8e9083b?stream=false";
  const headers = {
    "Content-Type": "application/json",
    "Authorization": `Bearer AstraCS:QWsAPbjEHowvUYgZCMhmUsTq:33978159c2188aa043938d264e3740a2da85c484f1bb6c0678a3b4401431cd68`
  };
  const body = {
    input_value: inputValue,
    output_type: "chat",
    input_type: "chat",
    tweaks: {
      "ChatInput-Pbs56": {},
      "ParseData-Tc67o": {},
      "Prompt-fpcAu": {},
      "SplitText-YeCPB": {},
      "ChatOutput-frJqY": {},
      "AstraDB-wxdvr": {},
      "AstraDB-XT11N": {},
      "File-icSdP": {},
      "MistalAIEmbeddings-OSlJY": {},
      "MistalAIEmbeddings-WWgxD": {},
      "GroqModel-rqeeT": {}
    }
  };

  try {
    console.log('Sending request to:', url);
    console.log('Request headers:', headers);
    console.log('Request body:', body);

    const response = await fetch(url, {
      method: 'POST',
      headers: headers,
      body: JSON.stringify(body)
    });

    if (!response.ok) {
      const errorDetails = await response.text();
      throw new Error(`HTTP error! status: ${response.status}, details: ${errorDetails}`);
    }

    const responseData = await response.json();
    console.log('Response:', responseData);
    return responseData;
  } catch (error) {
    console.error('Error:', error.message);
    throw error;
  }
}

const Chat = () => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');

  const handleSend = async () => {
    if (input.trim()) {
      setMessages([...messages, { text: input, sender: 'user' }]);
      setInput('');

      try {
        const response = await runLangflow(input);
        // Assuming the response structure contains the text in this path
        const botMessage = response.outputs[0].outputs[0].artifacts.message;
        setMessages((prevMessages) => [
          ...prevMessages,
          { text: botMessage, sender: 'bot' },
        ]);
      } catch (error) {
        console.error('Error getting response from Langflow:', error);
      }
    }
  };

  return (
    <div className="flex flex-col h-screen bg-gray-900 text-white">
      <header className="bg-blue-600 text-white p-4 text-center">
        <h1 className="text-xl font-bold">Langflow Chatbot</h1>
      </header>
      <div className="flex-1 overflow-y-auto p-4 relative">
        {messages.map((msg, index) => (
          <div key={index} className={`mb-2 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>
            <span className={`inline-block p-2 rounded-lg ${msg.sender === 'user' ? 'bg-blue-500 text-white' : 'bg-black text-white'}`}>
              {msg.text}
            </span>
          </div>
        ))}
        <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
          <p className="text-gray-400">Team DCODE Ai</p>
        </div>
      </div>
      <div className="p-4 bg-gray-800 border-t border-gray-700 flex items-center">
        <input
          type="text"
          className="flex-grow p-2 border rounded-lg text-black focus:outline-none"
          placeholder="Type your message..."
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && handleSend()}
        />
        <button
          onClick={handleSend}
          className="ml-2 bg-blue-500 text-white p-2 rounded-lg"
        >
          Send
        </button>
      </div>
    </div>
  );
};

export default Chat;

